'''
Singleton (Одинак)
Для чого він використовується? Патерн Singleton використовується для створення класу, який має лише один екземпляр. Цей екземпляр доступний глобально, і він використовується для збереження спільного стану або ресурсів. Одинак гарантує, що в будь-який момент часу існує лише один об’єкт даного класу.

Як він працює?

Клас Singleton має приватний конструктор, щоб заборонити створення більше одного екземпляра.
Він також має статичний метод, який повертає єдиний екземпляр цього класу.
При першому виклику цього методу створюється єдиний екземпляр, а при наступних викликах повертається вже існуючий екземпляр.
Приклад використання: Давай уявимо, що ми пишемо програму для керування наявністю товарів у складі. Ми хочемо, щоб у нас був лише один об’єкт, який відповідає за збереження інформації про товари. Одинак допоможе нам забезпечити, що усі частини програми використовують один і той же об’єкт для доступу до цієї інформації.
'''

class EventLogger:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.log = []
        return cls._instance

    def add_event(self, event_message):
        self.log.append(event_message)

    def get_all_events(self):
        return self.log

# Приклад використання
logger = EventLogger()
logger.add_event("User logged in")
logger.add_event("Item added to cart")

another_logger = EventLogger()
print(another_logger.get_all_events())  # ['User logged in', 'Item added to cart']
